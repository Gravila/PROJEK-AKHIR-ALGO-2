from datetime import datetime
import re

daftar_tugas = []  

def validasi_tanggal(tanggal_str):
    """Validasi format tanggal YYYY-MM-DD"""
    if not tanggal_str.strip():  # Cek input kosong
        return False
    
    pattern = r'^\d{4}-\d{2}-\d{2}$'
    if not re.match(pattern, tanggal_str):
        return False
    
    try:
        datetime.strptime(tanggal_str, '%Y-%m-%d')
        return True
    except ValueError:
        return False

def input_tidak_kosong(prompt):
    """Memastikan input tidak kosong"""
    while True:
        nilai = input(prompt).strip()
        if nilai:
            return nilai
        print("‚ö†Ô∏è Input tidak boleh kosong! Silakan coba lagi.")

def input_tanggal(prompt):
    """Input tanggal dengan validasi"""
    while True:
        tanggal = input(prompt).strip()
        if not tanggal:
            print("‚ö†Ô∏è Tanggal tidak boleh kosong!")
            continue
        if validasi_tanggal(tanggal):
            return tanggal
        print("‚ö†Ô∏è Format tanggal tidak valid! Gunakan format YYYY-MM-DD (contoh: 2024-12-25)")

def tambah_tugas():  
    print("\n--- Tambah Tugas Baru ---")  
    nama_tugas = input_tidak_kosong("Nama tugas       : ")
    nama_matkul = input_tidak_kosong("Nama mata kuliah : ")
    deadline = input_tanggal("Tanggal deadline (YYYY-MM-DD): ")
    deskripsi = input_tidak_kosong("Deskripsi tugas  : ")
  
    tugas = {  
        "id": len(daftar_tugas) + 1,  
        "nama": nama_tugas,  
        "matkul": nama_matkul,  
        "deadline": deadline,  
        "deskripsi": deskripsi  
    }  
  
    daftar_tugas.append(tugas)  
    print("‚úÖ Tugas berhasil ditambahkan!\n")  
  
def merge_sort(tugas_list):  
    if len(tugas_list) <= 1:  
        return tugas_list  
    mid = len(tugas_list) // 2  
    left = merge_sort(tugas_list[:mid])  
    right = merge_sort(tugas_list[mid:])  
    return merge(left, right)  
  
def merge(left, right):  
    result = []  
    i = j = 0  
    while i < len(left) and j < len(right):  
        if left[i]["deadline"] <= right[j]["deadline"]:  
            result.append(left[i])  
            i += 1  
        else:  
            result.append(right[j])  
            j += 1  
    result.extend(left[i:])  
    result.extend(right[j:])  
    return result  

def tampilkan_tugas():  
    print("\n--- Daftar Tugas (Terurut berdasarkan deadline) ---")  
    if not daftar_tugas:  
        print("Belum ada tugas.")  
        return  
  
    tugas_terurut = merge_sort(daftar_tugas.copy())  # Menggunakan copy untuk menghindari modifikasi list asli
    for t in tugas_terurut:  
        print(f"{t['id']}. {t['nama']} ({t['matkul']}) - Deadline: {t['deadline']}")  
        print(f"   Deskripsi: {t['deskripsi']}")
        print()  # Tambah baris kosong untuk pemisah

def cari_tugas_by_matkul():  
    if not daftar_tugas:
        print("Belum ada tugas.")
        return
        
    matkul = input_tidak_kosong("Masukkan nama mata kuliah: ")
    hasil = [t for t in daftar_tugas if matkul.lower() in t["matkul"].lower()]  # Menggunakan 'in' untuk pencarian yang lebih fleksibel
    print(f"\nHasil pencarian untuk matkul '{matkul}':")  
    if not hasil:  
        print("Tugas tidak ditemukan.")  
    else:
        # Urutkan hasil berdasarkan deadline
        hasil_terurut = merge_sort(hasil)
        for t in hasil_terurut:  
            print(f"{t['id']}. {t['nama']} - Deadline: {t['deadline']}")  
            print(f"   Deskripsi: {t['deskripsi']}")
            print()  # Tambah baris kosong untuk pemisah
def binary_search_deadline(tugas_urut, target_deadline):
    low, high = 0, len(tugas_urut) - 1
    hasil = []

    while low <= high:
        mid = (low + high) // 2
        if tugas_urut[mid]["deadline"] == target_deadline:
            # Temukan semua tugas dengan tanggal sama
            hasil.append(tugas_urut[mid])

            # Cari ke kiri
            left_idx = mid - 1
            while left_idx >= 0 and tugas_urut[left_idx]["deadline"] == target_deadline:
                hasil.insert(0, tugas_urut[left_idx])
                left_idx -= 1

            # Cari ke kanan
            right_idx = mid + 1
            while right_idx < len(tugas_urut) and tugas_urut[right_idx]["deadline"] == target_deadline:
                hasil.append(tugas_urut[right_idx])
                right_idx += 1

            return hasil
        elif tugas_urut[mid]["deadline"] < target_deadline:
            low = mid + 1
        else:
            high = mid - 1

    return hasil  # jika tidak ada ditemukan, hasil kosong


def cari_semua_tugas_by_deadline(tugas_urut, target):
    """Mencari semua tugas dengan deadline tertentu"""
    hasil = []
    for tugas in tugas_urut:
        if tugas["deadline"] == target:
            hasil.append(tugas)
    return hasil

def cari_tugas_by_deadline():  
    print("\n--- Cari Tugas berdasarkan Deadline ---")
    if not daftar_tugas:
        print("Belum ada tugas.")
        return
    
    print("Pilih opsi pencarian:")
    print("1. Cari berdasarkan tanggal spesifik (Binary Search)")
    print("2. Cari berdasarkan range tanggal")
    
    pilihan = input("Pilih opsi (1/2): ").strip()
    
    if pilihan == "1":
        # Pencarian berdasarkan tanggal spesifik dengan Binary Search
        tanggal = input_tanggal("Masukkan deadline (YYYY-MM-DD): ")
        tugas_urut = merge_sort(daftar_tugas.copy())  
        hasil = binary_search_deadline(tugas_urut, tanggal)

        print(f"\nHasil pencarian berdasarkan deadline {tanggal}:")  
        if hasil:
            for idx, tugas in enumerate(hasil, start=1):
                    print(f"{idx}. {tugas['nama']} ({tugas['matkul']}) - {tugas['deadline']}")
                    print(f"   Deskripsi: {tugas['deskripsi']}\n")

        else:  
            print("Tugas tidak ditemukan.")
            
    elif pilihan == "2":
        # Bagian pencarian range (tetap sama)
        tanggal_mulai = input_tanggal("Masukkan tanggal mulai (YYYY-MM-DD): ")
        tanggal_akhir = input_tanggal("Masukkan tanggal akhir (YYYY-MM-DD): ")
        
        # Validasi range tanggal
        if tanggal_mulai > tanggal_akhir:
            print("‚ö†Ô∏è Tanggal mulai tidak boleh lebih besar dari tanggal akhir!")
            return
        
        tugas_dalam_range = [t for t in daftar_tugas 
                            if tanggal_mulai <= t["deadline"] <= tanggal_akhir]
        
        if not tugas_dalam_range:
            print(f"Tidak ada tugas dalam rentang {tanggal_mulai} sampai {tanggal_akhir}")
            return
        
        tugas_terurut = merge_sort(tugas_dalam_range)
        print(f"\nTugas dalam rentang {tanggal_mulai} sampai {tanggal_akhir}:")
        for t in tugas_terurut:
            print(f"{t['id']}. {t['nama']} ({t['matkul']}) - Deadline: {t['deadline']}")
            print(f"   Deskripsi: {t['deskripsi']}\n")
    else:
        print("‚ö†Ô∏è Pilihan tidak valid.")  

def hapus_tugas():  
    print("\n--- Hapus Tugas ---")  
    if not daftar_tugas:
        print("Belum ada tugas.")
        return
        
    tampilkan_tugas()  
    try:  
        id_input = input("Masukkan ID tugas yang ingin dihapus: ").strip()
        if not id_input:
            print("‚ö†Ô∏è ID tidak boleh kosong.")
            return
            
        id_tugas = int(id_input)
        tugas_ditemukan = None  
        for t in daftar_tugas:  
            if t["id"] == id_tugas:  
                tugas_ditemukan = t  
                break  
        
        if tugas_ditemukan:  
            daftar_tugas.remove(tugas_ditemukan)  
            print(f"‚úÖ Tugas '{tugas_ditemukan['nama']}' dengan ID {id_tugas} berhasil dihapus!\n")  
        else:  
            print("‚ö†Ô∏è Tugas dengan ID tersebut tidak ditemukan.")  
    except ValueError:  
        print("‚ö†Ô∏è ID yang dimasukkan tidak valid. Harap masukkan angka.")  
  
def menu():  
    while True:  
        tampilkan_header()  # Header muncul setiap kali menu ditampilkan
        print("\n=== MENU JADWALIN ===")  
        print("1. Tambah Tugas")  
        print("2. Tampilkan Semua Tugas")  
        print("3. Cari Tugas berdasarkan Mata Kuliah")  
        print("4. Cari Tugas berdasarkan Deadline")  
        print("5. Hapus Tugas")  
        print("6. Keluar")  
        
        pilihan = input("Pilih menu (1-6): ").strip()
  
        if pilihan == "1":  
            tambah_tugas()  
        elif pilihan == "2":  
            tampilkan_tugas()  
        elif pilihan == "3":  
            cari_tugas_by_matkul()  
        elif pilihan == "4":  
            cari_tugas_by_deadline()  
        elif pilihan == "5":  
            hapus_tugas()  
        elif pilihan == "6":  
            print("üëã Terima kasih telah menggunakan Jadwalin!")  
            break  
        else:  
            print("‚ö†Ô∏è Pilihan tidak valid, silakan pilih 1-6.")  
  
def tampilkan_header():
    """Menampilkan header ASCII art untuk Jadwalin"""
    print("=" * 60)
    print("     ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó    ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó")
    print("     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë    ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë")
    print("     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë")
    print("‚ñà‚ñà   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë")
    print("‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïö‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë")
    print(" ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù")
    print("=" * 60)
    print("üéì Sistem Manajemen Tugas Kuliah - Versi 2.0")
    print("   Kelola tugas kuliah Anda dengan mudah dan efisien!")
    print("=" * 60)

# Jalankan program  
if _name_ == "_main_":
    menu()
